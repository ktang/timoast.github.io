ggplot(row_means, aes(value)) +
geom_histogram()
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue)
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue')
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue') +
theme_bw()
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue') +
theme_bw() + ggtitle('The Central Limit Theorem')
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue') +
theme_bw() + ggtitle('The Central Limit Theorem') +
xlab("Sample means")
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue') +
theme_bw() + ggtitle('The Central Limit Theorem') +
xlab("Sample means") +
geom_vline(xintercept = empirical_mean, color = "red")
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue') +
theme_bw() + ggtitle('The Central Limit Theorem') +
xlab("Sample means") +
geom_vline(xintercept = empirical_mean, color = "red") +
geom_vline(xintercept = theoretical_mean, color = "blue")
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue') +
theme_bw() + ggtitle('The Central Limit Theorem') +
xlab("Sample means") +
geom_vline(xintercept = empirical_mean, color = "red") +
geom_vline(xintercept = theoretical_mean, color = "blue") +
stat_function(fun=dnorm,args=list(mean=empirical_mean, sd=empirical_std),color = "blue", size = 1.0)
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue',
binwidth = lambda) +
theme_bw() + ggtitle('The Central Limit Theorem') +
xlab("Sample means") +
geom_vline(xintercept = empirical_mean, color = "red") +
geom_vline(xintercept = theoretical_mean, color = "blue") +
stat_function(fun=dnorm,args=list(mean=empirical_mean, sd=empirical_std),color = "blue", size = 1.0)
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue',
binwidth = lambda, aes(y = ..density..)) +
theme_bw() + ggtitle('The Central Limit Theorem') +
xlab("Sample means") +
geom_vline(xintercept = empirical_mean, color = "red") +
geom_vline(xintercept = theoretical_mean, color = "blue") +
stat_function(fun=dnorm,args=list(mean=empirical_mean, sd=empirical_std),color = "blue", size = 1.0)
ggplot(row_means, aes(value)) +
geom_histogram(color = 'black', fill = 'lightblue',
binwidth = lambda, aes(y = ..density..)) +
theme_bw() + ggtitle('The Central Limit Theorem') +
xlab("Sample means") +
geom_vline(xintercept = empirical_mean, color = "red") +
geom_vline(xintercept = theoretical_mean, color = "blue") +
stat_function(fun=dnorm,args=list(mean=empirical_mean, sd=empirical_std),color = "red", size = 1.0) +
stat_function(fun=dnorm,args=list(mean=theoretical_mean, sd=theoretical_std),color = "blue", size = 1.0)
shiny::runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
data("ToothGrowth")
dim(ToothGrowth)
str(ToothGrowth)
ToothGrowth
library(dplyr)
library(ggplot2)
library(datasets)
data("ToothGrowth")
dim(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
ggplot(ToothGrowth, aes(len, dose)) +
geom_point()
ggplot(ToothGrowth, aes(len, supp)) +
geom_point()
ggplot(ToothGrowth, aes(len, dose)) +
geom_point() + facet_wrap(~supp)
ggplot(ToothGrowth, aes(dose, len)) +
geom_point() + facet_wrap(~supp)
ggplot(ToothGrowth, aes(dose, len)) +
geom_point() + facet_wrap(~supp) +
geom_smooth()
ggplot(ToothGrowth, aes(dose, len)) +
geom_point() +
geom_smooth() +
facet_wrap(~supp)
ggplot(ToothGrowth, aes(dose, len)) +
geom_point() +
geom_smooth() +
facet_wrap(~supp)
table(ToothGrowth)
ggplot(ToothGrowth, aes(len)) +
geom_histogram()
ggplot(ToothGrowth, aes(len)) +
geom_histogram() + facet_wrap(~supp)
ggplot(ToothGrowth, aes(len)) +
geom_density() + facet_wrap(~supp)
ggplot(ToothGrowth, aes(len)) +
geom_histogram() + facet_wrap(~supp)
ggplot(ToothGrowth, aes(len)) +
geom_density() + facet_wrap(~supp)
ggplot(ToothGrowth, aes(len)) +
geom_density() + facet_wrap(~dose)
ggplot(ToothGrowth, aes(len)) +
geom_density() + facet_wrap(supp~dose)
ggplot(ToothGrowth, aes(len)) +
geom_histogram() + facet_wrap(supp~dose)
ggplot(ToothGrowth, aes(len)) +
geom_density(fill = "blue") + facet_wrap(supp~dose)
?set
theme_set(theme_bw())
ggplot(ToothGrowth, aes(dose, len)) +
geom_point() +
geom_smooth() +
facet_wrap(~supp)
ggplot(ToothGrowth, aes(len)) +
geom_density(fill = "blue") + facet_wrap(supp~dose)
summary(ToothGrowth)
summary(ToothGrowth)
shapiro.test(ToothGrowth$len)
hist(ToothGrowth$len, breaks = 20)
hist(ToothGrowth$len, breaks = 30)
hist(ToothGrowth$len, breaks = 50)
hist(ToothGrowth$len, breaks = 10)
hist(ToothGrowth$len, breaks = 15)
hist(ToothGrowth$len, breaks = 20)
hist(ToothGrowth$len, breaks = 20, fill = 'blue')
hist(ToothGrowth$len, breaks = 20, col = 'blue')
shapiro.test(ToothGrowth$len)
hist(ToothGrowth$len, breaks = 20, col = 'blue')
head(ToothGrowth)
t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 0.5])
t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 0.5,])
unique(ToothGrowth$dose)
t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 1.0,])
t.test(len ~ supp, data = ToothGrowth[ToothGrowth$dose == 2.0,])
?shapiro.test
shiny::runApp('Documents/GitHub/single_cell_shiny/sc_genes')
dat
dat <- readRDS("~/Google Drive/single_cell_shiny/no_act_2h_r1.Rdata")
dat
dat@data.info
dat@var.genes
?FindAllMarkers
gene_df <- read.csv("~/Google Drive/genes.tsv")
gene_df <- read.csv("~/Google Drive/single_cell_shiny/genes.tsv")
gene_df
gene_df <- read.csv("~/Google Drive/single_cell_shiny/genes.tsv", sep = "\t")
gene_df
head(gene_df)
gene_df <- read.csv("~/Google Drive/single_cell_shiny/genes.tsv",
sep = "\t",
col.names = c("AGI", "gene"))
head(gene_df)
root_markers <- read.csv("~/Google Drive/single_cell_shiny/root_markers.csv")
head(root_markers)
head(gene_df)
genes <- gene_df$AGI
names(genes) <- gene_df$gene
genes
genes[1:10]
names(genes)
genes <- gene_df$AGI
genes
names(genes) <- gene_df$gene
genes
genes[[1]]
genes[1]
dat
genes <- rownames(dat@data)
genes
head(gene_df)
inner_join(gene_df, data.frame(gene = genes)) %>% View
genes <- inner_join(gene_df, data.frame(gene = genes)) %>% View
genes <- inner_join(gene_df, data.frame(gene = genes))
genes <- rownames(dat@data)
genes <- inner_join(gene_df, data.frame(gene = genes))
genes
genes <- rownames(dat@data)
genes <- inner_join(gene_df, data.frame(gene = genes))
str(genes)
gene_df <- read.csv("~/Google Drive/single_cell_shiny/genes.tsv",
sep = "\t",
col.names = c("AGI", "gene"),
stringsAsFactors = FALSE)
root_markers <- read.csv("~/Google Drive/single_cell_shiny/root_markers.csv",
stringsAsFactors = FALSE)
str(gene_df)
genes <- rownames(dat@data)
genes <- inner_join(gene_df, data.frame(gene = genes))
str(genes)
genes <- c(genes$AGI, genes$gene)
genes
unique(genes)
gene_df
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
gene
gene <- NULL
gene
length(gene)
gene <- ""
gene
length(gene)
head(gene_df)
gene <- filter(gene_df, gene == "AT1G01046", | AGI == "AT1G01046")
gene <- filter(gene_df, gene == "AT1G01046", AGI == "AT1G01046")
gene
gene <- filter(gene_df, gene == "AT1G01046" | AGI == "AT1G01046")
gene
gene <- filter(gene_df, gene == "AT1G01046" | AGI == "AT1G01046")$gene
gene
gene <- filter(gene_df, gene == "AT1G010461" | AGI == "AT1G010461")$gene
gene
length(gene)
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
gene
length(gene)
length(gene) == 0
length(gene) == 0 | FALSE
length(gene) == 0 | TRUE
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
cluster_markers <- read.csv("~/Google Drive/single_cell_shiny/cluster_markers.tsv")
cluster_markers
cluster_markers <- read.csv("~/Google Drive/single_cell_shiny/cluster_markers.tsv",
sep = "\t")
head(cluster_markers)
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
cluster_markers <- read.csv("~/Google Drive/single_cell_shiny/cluster_markers.tsv",
sep = "\t")
head(cluster_markers)
root_markers <- read.csv("~/Google Drive/single_cell_shiny/root_markers.csv",
stringsAsFactors = FALSE)
head(root_markers)
root_markers <- root_markers %>% mutate(cell_type = gsub('[[:digit:]]+', '', Maker.Tissue.Number))
root_markers
root_markers <- root_markers %>% mutate(cell_type = gsub('[[:digit:]]+', '', Maker.Tissue.Number)) %>%
select(-Maker.Tissue.Number)
root_markers
library(readr)
write_tsv(root_markers, "~/Google Drive/single_cell_shiny/root_markers.tsv")
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
root_markers <- read.csv("~/Google Drive/single_cell_shiny/root_markers.tsv",
sep = "\t",
stringsAsFactors = FALSE)
head(root_markers)
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
protoplasting_genes <- read.csv("~/Google Drive/single_cell_shiny/protoplasting_genes.txt")
protoplasting_genes
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
protoplasting_genes <- read.csv("~/Google Drive/single_cell_shiny/protoplasting_genes.txt",
col.names = "Gene")
head(protoplasting_genes)
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
library(d3heatmap)
?d3heatmap
seq("A":"D")
dat
test_data <- dat@data.info
test_data
test_data <- dplyr::select(test_data, genotype, res.1)
test_data
rownames(test_data) <- NULL
head(test_data)
test_data
test_data %>%
group_by(genotype) %>%
summarise(count = n())
test_data %>%
group_by(genotype, res.1) %>%
summarise(count = n())
test_data %>%
group_by(genotype, res.1) %>%
summarise(count = n()) %>%
tidyr::spread(genotype, res.1)
test_data %>%
group_by(genotype, res.1) %>%
summarise(count = n()) %>% View
tidyr::spread(genotype, count)
test_data %>%
group_by(genotype, res.1) %>%
summarise(count = n()) %>%
tidyr::spread(genotype, count)
hmap_data <- test_data %>%
group_by(genotype, res.1) %>%
summarise(count = n()) %>%
tidyr::spread(genotype, count)
hmap_data
d3heatmap(hmap_data)
as.matrix(hmap_data)
d3has.matrix(hmap_data)
d3heatmap(has.matrix(hmap_data))
d3heatmap(as.matrix(hmap_data))
hmap_data
hmap_mat <- as.matrix(hmap_data)
hmap_mat
hmap_mat[,1]
rownames(hmap_mat) <- hmap_mat[,1]
hmap_mat
hmap_mat[,-1]
hmap_mat <- hmap_mat[,-1]
as.numeric(hmap_mat)
class(hmap_mat) <- "numeric"
hmap_mat
d3heatmap(hmap_mat)
d3heatmap(t(hmap_mat))
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
test_data
test_data %>% group_by(genotype, res.1) %>%
summarise(count = n(), perc = n / nrow(test_data))
test_data %>% group_by(genotype, res.1) %>%
summarise(count = n(), perc = count / nrow(test_data))
test_data %>% group_by(genotype, res.1) %>%
summarise(count = n(), perc = count / nrow(test_data) * 100)
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
hmap_data
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
?plot_grid
?plot_ly
?layout
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
brewer.pal(9, "RdYlBu")
scale_color_brewer(brewer.pal(9, "RdYlBu"))(100)
colorRampPalette(brewer.pal(9, "RdYlBu"))
colorRampPalette(brewer.pal(9, "RdYlBu"))(100)
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
test_data
test_data$color_by_a <- test_data$genotype
test_data$color_by_b <- test_data$res.1
make_heatmap(test_data)
make_heatmap <- function(input_data) {
# get counts
hmap_data <- input_data %>%
group_by(color_by_a, color_by_b) %>%
summarise(count = n(), perc = count / nrow(input_data) * 100) %>%
select(-count) %>%
spread(color_by_a, perc)
# convert to matrix
hmap_mat <- as.matrix(hmap_data)
# set row names
rownames(hmap_mat) <- hmap_mat[,1]
hmap_mat <- hmap_mat[,-1]
class(hmap_mat) <- "numeric"
return(t(hmap_mat))
}
make_heatmap(test_data)
make_heatmap <- function(input_data) {
# get counts
hmap_data <- input_data %>%
group_by(color_by_a, color_by_b) %>%
summarise(count = n(), perc = count / nrow(input_data) * 100) %>%
select(-count) %>%
spread(color_by_a, perc)
print(head(hmap_data))
# convert to matrix
hmap_mat <- as.matrix(hmap_data)
# set row names
rownames(hmap_mat) <- hmap_mat[,1]
hmap_mat <- hmap_mat[,-1]
class(hmap_mat) <- "numeric"
return(t(hmap_mat))
}
a
hmap_data <- test_data %>%
group_by(color_by_a, color_by_b) %>%
summarise(count = n(), perc = count / nrow(input_data) * 100) %>%
select(-count) %>%
spread(color_by_a, perc)
hmap_data <- test_data %>%
group_by(color_by_a, color_by_b) %>%
summarise(count = n(), perc = count / nrow(test_data) * 100) %>%
select(-count) %>%
spread(color_by_a, perc)
hmap_data
View(test_data)
hmap_data
is.na(hmap_data)
is.na(hmap_data) <- 0
hmap_data[is.na(hmap_data)] <- 0
hmap_data
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
?renderDataTable
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
library(Seurat)
tenx <- readRDS("~/Google Drive/single_cell_shiny/cotyledons_r1.Rdata")
?FindAllMarkers
tenx.markers <- FindAllMarkers(tenx, ident.1 = "res.1",
only.pos = FALSE,
min.pct = 0.25,
thresh.use = 0.25,
genes.use = tenx@var.genes)
top.markers <- tenx.markers %>%
group_by(cluster) %>% top_n(20, avg_diff)
library(dplyr)
top.markers <- tenx.markers %>%
group_by(cluster) %>% top_n(20, avg_diff)
top.markers
top.markers$cluster
tenx.markers <- FindAllMarkers(tenx, ident.1 = "res.0.5",
only.pos = FALSE,
min.pct = 0.25,
thresh.use = 0.25,
genes.use = tenx@var.genes)
top.markers <- tenx.markers %>%
group_by(cluster) %>% top_n(20, avg_diff)
top.markers$cluster
tenx.markers <- FindAllMarkers(tenx, ident.1 = 0.5,
only.pos = FALSE,
min.pct = 0.25,
thresh.use = 0.25,
genes.use = tenx@var.genes)
tenx <- SetAllIdent(tenx, id = "res.1")
tenx.markers <- FindAllMarkers(tenx, ident.1 = 1,
only.pos = FALSE,
min.pct = 0.25,
thresh.use = 0.25,
genes.use = tenx@var.genes)
top.markers <- tenx.markers %>%
group_by(cluster) %>% top_n(20, avg_diff)
top.markers$cluster
tenx@data.info
unique(tenx@data.info$re)
unique(tenx@data.info$res.1)
unique(tenx@data.info$res.0.5)
tenx <- SetAllIdent(tenx, id = "res.0.5")
tenx.markers <- FindAllMarkers(tenx, ident.1 = "res.0.5",
only.pos = FALSE,
min.pct = 0.25,
thresh.use = 0.25,
genes.use = tenx@var.genes)
top.markers <- tenx.markers %>%
group_by(cluster) %>% top_n(20, avg_diff)
top.markers$cluster
tenx <- SetAllIdent(tenx, id = "res.1")
tenx.markers <- FindAllMarkers(tenx, ident.1 = "res.0.5",
only.pos = FALSE,
min.pct = 0.25,
thresh.use = 0.25,
genes.use = tenx@var.genes)
top.markers
top.markers <- tenx.markers %>%
group_by(cluster) %>% top_n(20, avg_diff)
top.markers
clusters <- seq(0.5,3,0.5)
clusters
clusters[]2
clusters[2]
shiny::runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
test <- "/Users/timstuart/Google Drive/single_cell_shiny/plus_act_1h_r1_markers_res.2"
strsplit(test, "/", fixed = T)
strsplit(test, "/", fixed = T)[-1]
strsplit(test, "/", fixed = T)[1]
unlist(strsplit(test, "/", fixed = T))
unlist(strsplit(test, "/", fixed = T))[1]
unlist(strsplit(test, "/", fixed = T))[-2]
aa <- unlist(strsplit(test, "/", fixed = T))
aa
tail(aa)
tail(aa, 1)
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
runApp('Documents/GitHub/single_cell_shiny/sc_genes')
shiny::runApp('Documents/GitHub/single_cell_shiny/sc_genes')
?FindAllMarkers
FindMarkers()
?FindMarkers
test <- NULL
nrow(test)
nrow(test) > 0
if(nrow(test)>0){print("ok")}
if(NULL) {print("ok")}
if(NULL) {print()}
if(NULL) {}
if(NULL)
{}
if(NULL) {}
shiny::runApp('Documents/GitHub/single_cell_shiny/sc_genes')
?SetAllIdent
?Seurat::SetAllIdent
shiny::runApp('Documents/GitHub/single_cell_shiny/sc_genes')
setwd("~/Documents/GitHub/timoast.github.io/")
